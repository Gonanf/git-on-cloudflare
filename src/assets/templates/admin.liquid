{% layout 'layout' %}
{% block %}
{% render 'repo_nav',
  owner: owner,
  repo: repo,
  refEnc: refEnc,
  showRefDropdown: false,
  currentTab: 'admin'
%}
{% if progress %}
  {% render 'progress', progress: progress %}
{% endif %}
<div class="space-y-6">
  <div class="alert alert-warn">
    <strong>
      <svg
        class="inline w-4 h-4 mr-2 text-amber-600 dark:text-amber-400 align-[-2px]"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
      >
        <path d="M10.29 3.86l-8.19 14A2 2 0 004 21h16a2 2 0 001.71-3.14l-8.19-14a2 2 0 00-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line>
      </svg>
      Admin Area</strong
    >
    - Actions here can permanently modify repository data
  </div>

  <!-- Repository Overview -->
  <div class="card p-6">
    <h2 class="text-xl font-semibold mb-4">Repository Overview</h2>
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-3">
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          R2 Packs Storage
        </div>
        <div class="font-mono text-sm">{{ storageSize | default: '0 bytes' }}</div>
      </div>
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          Packs
        </div>
        <div class="font-mono text-sm">
          {{ packCount | default: 0 }}
          {% assign hp = hydrationPackCount %}
          {% if hp or hp == 0 %}
            {% if hp > 0 %}
              <span class="text-xs text-gray-500">({{ hp }} hydration packs)</span>
            {% endif %}
          {% else %}
            {% assign hydrationPacks = 0 %}
            {% for pack in packList %}
              {% if pack contains 'pack-hydr-' %}
                {% assign hydrationPacks = hydrationPacks | plus: 1 %}
              {% endif %}
            {% endfor %}
            {% if hydrationPacks > 0 %}
              <span class="text-xs text-gray-500">({{ hydrationPacks }} hydration packs)</span>
            {% endif %}
          {% endif %}
        </div>
      </div>
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          Next Maintenance
        </div>
        <div class="font-mono text-sm">
          {% if nextMaintenanceIn %}
            <span title="{{ nextMaintenanceAt | default: '' }}">{{ nextMaintenanceIn }}</span>
          {% else %}
            <span class="text-gray-500">n/a</span>
          {% endif %}
        </div>
      </div>
      {% if state and state.meta and state.meta.doId %}
        <div>
          <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
            Durable Object ID
          </div>
          <div class="font-mono text-sm relative">
            <span title="{{ state.meta.doId }}">
              {{ state.meta.doId | slice: 0, 12 -}}
              {%- if state.meta.doId.size > 12 %}…{% endif %}
            </span>
            <button
              class="absolute -top-0.5 ml-2 p-1 rounded border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              onclick="adminActions.copyDoId('{{ state.meta.doId }}')"
              title="Copy DO ID"
              aria-label="Copy DO ID"
              style="margin-left: 0.5rem; top: -2px;"
            >
              <svg
                class="block w-4 h-4"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                aria-hidden="true"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"></path>
              </svg>
            </button>
            <span class="invisible">___copy</span>
          </div>
        </div>
      {% endif %}
      {% if state.looseR2SampleBytes %}
        <div>
          <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
            R2 Loose (sample)
          </div>
          <div class="font-mono text-sm">
            {% assign mb = state.looseR2SampleBytes | divided_by: 1048576.0 %}
            {% if mb >= 1 %}
              {{ mb | round: 2 }} MB
            {% else %}
              {% assign kb = state.looseR2SampleBytes | divided_by: 1024.0 %}
              {{ kb | round: 1 }} KB
            {% endif %}
            <span class="text-xs text-gray-500">
              ({{ state.looseR2SampleCount | default: 0 }} objs
              {%- if state.looseR2Truncated %}, truncated{% endif -%}
              )
            </span>
          </div>
        </div>
      {% endif %}
      {% if state.dbSizeBytes %}
        <div>
          <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
            Durable Object Storage
          </div>
          <div class="font-mono text-sm">
            {% assign mb = state.dbSizeBytes | divided_by: 1048576.0 %}
            {% if mb >= 1 %}
              {{ mb | round: 2 }} MB
            {% else %}
              {% assign kb = state.dbSizeBytes | divided_by: 1024.0 %}
              {{ kb | round: 1 }} KB
            {% endif %}
          </div>
        </div>
      {% endif %}
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          Unpacking
        </div>
        <div class="font-mono text-sm text-amber-600 dark:text-amber-400">
          {% if state.unpackWork %}
            {{ state.unpackWork.processedCount | default: 0 }}/
            {{- state.unpackWork.totalCount | default: 0 }}
          {% elsif state.unpackNext %}
            Scheduled
          {% else %}
            Idle
          {% endif %}
        </div>
      </div>
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          Hydration
        </div>
        <div class="font-mono text-sm text-blue-600 dark:text-blue-400">
          {% if hydrationData and hydrationData.running %}
            {{ hydrationData.stage }}
          {% elsif hydrationData and hydrationData.queued and hydrationData.queued > 0 %}
            Queued ({{ hydrationData.queued }})
          {% elsif hydrationStatus and hydrationStatus contains 'Completed' %}
            Completed
          {% else %}
            Not Started
          {% endif %}
        </div>
      </div>
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          HEAD
        </div>
        <div class="font-mono text-sm">
          {% if head.target %}
            {{ head.target | replace: 'refs/heads/', '' | replace: 'refs/tags/', '' }}
          {% else %}
            <span class="text-gray-500">unborn</span>
          {% endif %}
        </div>
      </div>
      <div>
        <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1">
          Branches/Tags
        </div>
        <div class="font-mono text-sm">
          {% assign branches = 0 %}
          {% assign tags = 0 %}
          {% for ref in refs %}
            {% if ref.name contains 'refs/heads/' %}
              {% assign branches = branches | plus: 1 %}
            {% elsif ref.name contains 'refs/tags/' %}
              {% assign tags = tags | plus: 1 %}
            {% endif %}
          {% endfor %}
          {{ branches }}/{{ tags }}
        </div>
      </div>
    </div>
  </div>

  <!-- Hydration Management -->
  <div class="card p-6">
    <h2 class="text-xl font-semibold mb-4">Pack Hydration</h2>
    <p class="text-gray-600 dark:text-gray-400 mb-4">
      Hydration builds thick packs used to serve fetches correctly and fast. It’s required for
      correctness, not just performance.
    </p>
    {% if hydrationData.running %}
      <div class="mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
        <div class="text-sm">
          <strong>
            <svg
              class="inline w-4 h-4 mr-1 text-blue-600 dark:text-blue-400 align-[-2px]"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <polyline points="23 4 23 10 17 10"></polyline><polyline points="1 20 1 14 7 14"></polyline><path d="M3.51 9a9 9 0 0114.13-3.36L23 10M1 14l5.36 4.36A9 9 0 0020.49 15"></path>
            </svg>
            Running:</strong
          >
          {{ hydrationData.stage | capitalize }}
          {% if hydrationData.progress.packIndex %}
            • Pack {{ hydrationData.progress.packIndex }}/{{ packCount }}
          {% endif %}
          {% if hydrationData.progress.producedBytes %}
            • {{ hydrationData.progress.producedBytes | divided_by: 1048576.0 | round: 1 }} MB
            produced
          {% endif %}
          {% if hydrationData.progress.segmentSeq %}
            • Segment #{{ hydrationData.progress.segmentSeq }}
          {% endif %}
        </div>
      </div>
    {% elsif hydrationStatus contains 'Completed' %}
      <div class="mb-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg text-sm">
        <strong>
          <svg
            class="inline w-4 h-4 mr-1 text-green-600 dark:text-green-400 align-[-2px]"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
          Hydration complete</strong
        >
        — hydrated packs are present
      </div>
    {% endif %}
    <div class="space-y-4">
      <div class="flex flex-wrap gap-3">
        <button id="hydration-dry-run" class="btn" onclick="adminActions.triggerHydration(true)">
          <svg
            class="inline w-4 h-4 mr-2 align-[-2px]"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
          <span class="label">Dry Run Analysis</span>
        </button>
        <button id="hydration-start" class="btn" onclick="adminActions.triggerHydration(false)">
          <svg
            class="inline w-4 h-4 mr-2 align-[-2px]"
            viewBox="0 0 24 24"
            fill="currentColor"
            aria-hidden="true"
          >
            <path d="M5 3l14 9-14 9V3z"></path>
          </svg>
          <span class="label">Start Hydration</span>
        </button>
        <button id="hydration-clear" class="btn secondary" onclick="adminActions.clearHydration()">
          <svg
            class="inline w-4 h-4 mr-2 align-[-2px]"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <path d="M3 6h18"></path><path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"></path><path d="M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line>
          </svg>
          <span class="label">Clear Hydration State</span>
        </button>
      </div>
      <div id="hydration-result" class="hidden">
        <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg text-sm overflow-x-auto"></pre>
      </div>
    </div>
  </div>

  <!-- Pack Files -->
  {% if state.packStats and state.packStats.size > 0 %}
    <div class="card p-6">
      <h2 class="text-xl font-semibold mb-4">Pack Files ({{ packCount }} total)</h2>
      <div class="overflow-x-auto">
        <table class="w-full text-sm">
          <thead>
            <tr class="border-b border-gray-200 dark:border-gray-700">
              <th class="text-left py-2">Pack Name</th>
              <th class="text-left py-2">Type</th>
              <th class="text-right py-2">Pack Size</th>
              <th class="text-right py-2">Index Size</th>
              <th class="text-center py-2">Index</th>
              <th class="text-center py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {% for packStat in state.packStats %}
              <tr class="border-b border-gray-100 dark:border-gray-800">
                <td class="py-2 font-mono text-xs">
                  {% assign packName = packStat.key | split: '/' | last %}
                  <span title="{{ packName }}">
                    {{ packName | slice: 0, 35 -}}
                    {%- if packName.size > 35 %}...{% endif %}
                  </span>
                </td>
                <td class="py-2">
                  {% assign packName = packStat.key | split: '/' | last %}
                  {% if packName contains 'pack-hydr-' %}
                    <span class="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 rounded"
                      >hydration</span
                    >
                  {% elsif packName contains 'pack-test-' %}
                    <span class="text-xs px-2 py-1 bg-yellow-100 dark:bg-yellow-900 rounded"
                      >test</span
                    >
                  {% else %}
                    <span class="text-xs px-2 py-1 bg-green-100 dark:bg-green-900 rounded"
                      >upload</span
                    >
                  {% endif %}
                </td>
                <td class="py-2 text-right font-mono text-xs">
                  {% if packStat.packSize %}
                    {% assign mb = packStat.packSize | divided_by: 1048576.0 %}
                    {% if mb >= 1 %}
                      {{ mb | round: 2 }} MB
                    {% else %}
                      {% assign kb = packStat.packSize | divided_by: 1024.0 %}
                      {{ kb | round: 1 }} KB
                    {% endif %}
                  {% else %}
                    -
                  {% endif %}
                </td>
                <td class="py-2 text-right font-mono text-xs">
                  {% if packStat.indexSize %}
                    {% assign kb = packStat.indexSize | divided_by: 1024.0 %}
                    {{ kb | round: 1 }} KB
                  {% else %}
                    -
                  {% endif %}
                </td>
                <td class="py-2 text-center">
                  {% if packStat.hasIndex %}
                    <svg
                      class="inline w-4 h-4 text-green-600 dark:text-green-400"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                    </svg>
                  {% else %}
                    <svg
                      class="inline w-4 h-4 text-red-600 dark:text-red-400"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      aria-hidden="true"
                    >
                      <line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                  {% endif %}
                </td>
                <td class="py-2 text-center">
                  <button
                    class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 p-1 rounded hover:bg-red-100 dark:hover:bg-red-900/20 transition-colors"
                    onclick="adminActions.removePack('{{ packStat.key | split: '/' | last }}')"
                    title="Delete this pack"
                    aria-label="Delete pack"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path d="M3 6h18"></path>
                      <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"></path>
                      <path d="M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2"></path>
                      <line x1="10" y1="11" x2="10" y2="17"></line>
                      <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                  </button>
                </td>
              </tr>
            {% endfor %}
            {% if packCount > state.packStats.size %}
              <tr>
                <td colspan="6" class="py-2 text-gray-500 italic text-center">
                  Showing first {{ state.packStats.size }} of {{ packCount }} packs
                </td>
              </tr>
            {% endif %}
          </tbody>
        </table>
      </div>
    </div>
  {% elsif packCount > 0 %}
    <div class="card p-6">
      <h2 class="text-xl font-semibold mb-4">Pack Files</h2>
      <p class="text-gray-600 dark:text-gray-400">
        {{ packCount }} pack files exist but size information not loaded
      </p>
    </div>
  {% endif %}

  <!-- References -->
  <div class="card p-6">
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold">References</h2>
      <button class="btn btn-sm" onclick="location.reload()">
        <svg
          class="inline w-4 h-4 mr-2 align-[-2px]"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <polyline points="23 4 23 10 17 10"></polyline><polyline points="1 20 1 14 7 14"></polyline><path d="M3.51 9a9 9 0 0114.13-3.36L23 10M1 14l5.36 4.36A9 9 0 0020.49 15"></path>
        </svg>
        <span class="label">Refresh All</span>
      </button>
    </div>
    <div id="refs-container">
      {% if refs and refs.size > 0 %}
        <div class="overflow-x-auto">
          <table class="w-full text-sm">
            <thead>
              <tr class="border-b border-gray-200 dark:border-gray-700">
                <th class="text-left py-2">Reference Name</th>
                <th class="text-left py-2">Target OID</th>
                <th class="text-left py-2">Type</th>
              </tr>
            </thead>
            <tbody>
              {% for ref in refs %}
                <tr class="border-b border-gray-100 dark:border-gray-800">
                  <td class="py-2 font-mono text-xs">
                    {{ ref.name | replace: 'refs/heads/', '' | replace: 'refs/tags/', '' }}
                  </td>
                  <td class="py-2 font-mono text-xs text-gray-600 dark:text-gray-400">
                    <span title="{{ ref.oid }}">{{ ref.oid | slice: 0, 12 }}...</span>
                  </td>
                  <td class="py-2">
                    {% if ref.name contains 'refs/heads/' %}
                      <span class="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 rounded"
                        >branch</span
                      >
                    {% elsif ref.name contains 'refs/tags/' %}
                      <span class="text-xs px-2 py-1 bg-green-100 dark:bg-green-900 rounded"
                        >tag</span
                      >
                    {% else %}
                      <span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">
                        {{- ref.name | split: '/' | first -}}
                      </span>
                    {% endif %}
                  </td>
                </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      {% else %}
        <p class="text-gray-500 italic">No references found</p>
      {% endif %}
    </div>
  </div>

  <!-- Debug Tools -->
  <div class="card p-6">
    <h2 class="text-xl font-semibold mb-4">Debug Tools</h2>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium mb-2">Check Object ID Existence</label>
        <div class="flex gap-2">
          <input
            type="text"
            id="debug-oid"
            placeholder="Enter 40-character SHA-1 hash"
            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 font-mono text-sm"
            pattern="[a-f0-9]{40}"
          >
          <button class="btn" onclick="adminActions.checkOid()">Check OID</button>
        </div>
        <div id="oid-result" class="mt-2 hidden">
          <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg text-sm overflow-x-auto"></pre>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium mb-2">Repository State Dump</label>
        <button id="debug-state-btn" class="btn" onclick="adminActions.dumpState()">
          <svg
            class="inline w-4 h-4 mr-2 align-[-2px]"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <path d="M3 3v18h18"></path><rect x="7" y="13" width="3" height="5"></rect><rect x="12" y="9" width="3" height="9"></rect><rect x="17" y="5" width="3" height="13"></rect>
          </svg>
          <span class="label">View DO State</span>
        </button>
        <div id="state-dump" class="mt-2 hidden">
          <pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg text-sm overflow-x-auto"></pre>
        </div>
      </div>
    </div>
  </div>

  <!-- Danger Zone -->
  <details class="card p-6 border-2 border-red-500 dark:border-red-600">
    <summary class="cursor-pointer font-bold text-red-600 dark:text-red-500">
      <svg
        class="inline w-4 h-4 mr-2 align-[-2px]"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
      >
        <path d="M10.29 3.86l-8.19 14A2 2 0 004 21h16a2 2 0 001.71-3.14l-8.19-14a2 2 0 00-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line>
      </svg>
      Danger Zone - Irreversible Actions
    </summary>
    <div class="mt-6 space-y-4">
      <div class="alert alert-error">
        <strong>Warning:</strong> These actions cannot be undone. All repository data will be
        permanently deleted.
      </div>
      <p class="text-sm text-gray-600 dark:text-gray-400">
        This will delete all objects, packs, references, and metadata associated with this
        repository. The repository will be removed from the owner's registry.
      </p>
      <button
        class="btn"
        style="background-color: #dc2626; color: white;"
        onclick="adminActions.confirmPurge()"
      >
        <svg
          class="inline w-4 h-4 mr-2 align-[-2px]"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="M3 6h18"></path><path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"></path><path d="M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line>
        </svg>
        <span class="label">Permanently Delete Repository</span>
      </button>
    </div>
  </details>
</div>

<script>
  // Admin actions for the page
  window.adminActions = {
    owner: '{{ owner }}',
    repo: '{{ repo }}',

    async triggerHydration(dryRun) {
      const btn = dryRun
        ? document.getElementById('hydration-dry-run')
        : document.getElementById('hydration-start');
      const labelSpan = btn.querySelector('.label');
      const originalText = labelSpan ? labelSpan.textContent : btn.textContent;
      btn.disabled = true;
      if (labelSpan) {
        labelSpan.textContent = 'Processing...';
      } else {
        btn.textContent = 'Processing...';
      }

      try {
        const res = await fetch(`/${this.owner}/${this.repo}/admin/hydrate`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ dryRun }),
        });

        const data = await res.json();
        const resultDiv = document.getElementById('hydration-result');
        const pre = resultDiv.querySelector('pre');

        if (res.ok) {
          pre.textContent = JSON.stringify(data, null, 2);
          resultDiv.classList.remove('hidden');

          if (!dryRun) {
            // Reload page after a delay to show updated status
            setTimeout(() => location.reload(), 2000);
          }
        } else {
          pre.textContent = `Error: ${data.error || 'Unknown error'}`;
          resultDiv.classList.remove('hidden');
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      } finally {
        btn.disabled = false;
        if (labelSpan) {
          labelSpan.textContent = originalText;
        } else {
          btn.textContent = originalText;
        }
      }
    },

    async copyDoId(id) {
      try {
        await navigator.clipboard.writeText(id);
        alert('Durable Object ID copied to clipboard');
      } catch (e) {
        alert('Failed to copy DO ID: ' + (e && e.message ? e.message : e));
      }
    },

    async clearHydration() {
      if (!confirm('Clear all hydration state and hydration-generated packs?')) return;

      const btn = document.getElementById('hydration-clear');
      const labelSpan = btn.querySelector('.label');
      const originalText = labelSpan ? labelSpan.textContent : btn.textContent;
      btn.disabled = true;
      if (labelSpan) {
        labelSpan.textContent = 'Clearing...';
      } else {
        btn.textContent = 'Clearing...';
      }

      try {
        const res = await fetch(`/${this.owner}/${this.repo}/admin/hydrate`, {
          method: 'DELETE',
        });

        const data = await res.json();

        if (data.ok) {
          alert('Hydration state cleared successfully');
          location.reload();
        } else {
          alert(`Error: ${data.error || 'Unknown error'}`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      } finally {
        btn.disabled = false;
        if (labelSpan) {
          labelSpan.textContent = originalText;
        } else {
          btn.textContent = originalText;
        }
      }
    },

    async checkOid() {
      const input = document.getElementById('debug-oid');
      const oid = input.value.trim();

      if (!/^[a-f0-9]{40}$/i.test(oid)) {
        alert('Please enter a valid 40-character SHA-1 hash');
        return;
      }

      try {
        const res = await fetch(`/${this.owner}/${this.repo}/admin/debug-oid/${oid}`);
        const data = await res.json();

        const resultDiv = document.getElementById('oid-result');
        const pre = resultDiv.querySelector('pre');
        pre.textContent = JSON.stringify(data, null, 2);
        resultDiv.classList.remove('hidden');
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    },

    async dumpState() {
      const dumpDiv = document.getElementById('state-dump');
      const pre = dumpDiv.querySelector('pre');
      const btn = document.getElementById('debug-state-btn');
      const labelSpan = btn ? btn.querySelector('.label') : null;
      const originalText = labelSpan ? labelSpan.textContent : btn ? btn.textContent : '';
      if (btn) {
        btn.disabled = true;
        if (labelSpan) {
          labelSpan.textContent = 'Processing...';
        } else {
          btn.textContent = 'Processing...';
        }
      }
      pre.textContent = '';
      dumpDiv.classList.remove('hidden');
      try {
        const res = await fetch(`/${this.owner}/${this.repo}/admin/debug-state`);
        const data = await res.json();
        pre.textContent = JSON.stringify(data, null, 2);
      } catch (error) {
        alert(`Error: ${error.message}`);
      } finally {
        if (btn) {
          btn.disabled = false;
          if (labelSpan) {
            labelSpan.textContent = originalText || 'View DO State';
          } else {
            btn.textContent = originalText || 'View DO State';
          }
        }
      }
    },

    async refreshRefs() {
      location.reload();
    },

    async confirmPurge() {
      const confirmText = prompt(
        `This action will PERMANENTLY DELETE all repository data.\n\n` +
          `To confirm, type exactly: purge-${this.owner}/${this.repo}`
      );

      if (confirmText !== `purge-${this.owner}/${this.repo}`) {
        if (confirmText !== null) {
          alert('Confirmation text did not match. Action cancelled.');
        }
        return;
      }

      if (!confirm('Final confirmation: Delete this repository forever?')) {
        return;
      }

      try {
        const res = await fetch(`/${this.owner}/${this.repo}/admin/purge`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ confirm: confirmText }),
        });

        const data = await res.json();

        if (data.ok) {
          alert('Repository has been permanently deleted');
          window.location.href = `/${this.owner}`;
        } else {
          alert(`Error: ${data.error || 'Unknown error'}`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    },

    async removePack(packName) {
      // Add warning for hydration packs
      let warningMsg = `Are you sure you want to remove pack: ${packName}?\n\nThis will delete the pack file, its index, and all associated metadata.`;

      if (packName.includes('pack-hydr-')) {
        warningMsg = `⚠️ WARNING: This is a hydration pack!\n\n${warningMsg}\n\nRemoving hydration packs can impact fetch correctness. Only do this for troubleshooting and re-run hydration afterward.`;
      }

      if (!confirm(warningMsg)) {
        return;
      }

      try {
        const res = await fetch(
          `/${this.owner}/${this.repo}/admin/pack/${encodeURIComponent(packName)}`,
          {
            method: 'DELETE',
          }
        );

        const data = await res.json();

        if (data.ok) {
          alert(
            `Pack removed successfully:\n- Pack file: ${data.deletedPack ? 'deleted' : 'not found'}\n- Index file: ${data.deletedIndex ? 'deleted' : 'not found'}\n- Metadata: ${data.deletedMetadata ? 'cleaned' : 'unchanged'}`
          );
          location.reload();
        } else {
          alert(`Error removing pack: ${data.error || 'Unknown error'}`);
        }
      } catch (error) {
        alert(`Error: ${error.message}`);
      }
    },
  };
</script>
{% endblock %}
