{% layout 'layout' %}
{% block %}
<header class="page-header">
  <h2 class="m-0">Auth Management</h2>
  <div></div>
</header>
<p class="muted mb-6">
  Use your root admin token to manage owners and tokens. Tokens are stored as SHA‑256 hashes. You
  can add and delete owners; individual token removal coming later.
</p>

<div id="message" class="hidden mb-4 p-4 rounded-lg" aria-live="polite" role="status"></div>

<div class="grid gap-6 md:grid-cols-2 mb-6">
  <div class="card p-6">
    <h3>1) Admin Token</h3>
    <div class="space-y-3">
      <input
        id="adm"
        type="password"
        placeholder="Enter AUTH_ADMIN_TOKEN"
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 focus:outline-hidden focus:ring-2 focus:ring-blue-500"
      >
      <button class="btn w-full sm:w-auto" id="load">Load Users</button>
    </div>
    <div class="text-sm muted mt-3">
      Your browser will remember this for the current tab (localStorage).
    </div>
  </div>
  <div class="card p-6">
    <h3>2) Add Owner / Token</h3>
    <div class="space-y-3">
      <input
        id="owner"
        placeholder="owner (e.g., rachel)"
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 focus:outline-hidden focus:ring-2 focus:ring-blue-500"
      >
      <input
        id="token"
        placeholder="token (raw)"
        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 focus:outline-hidden focus:ring-2 focus:ring-blue-500"
      >
      <button class="btn w-full sm:w-auto" id="add">Add</button>
    </div>
    <div class="text-sm muted mt-3">
      Tip: Each collaborator uses their own token. For Git Basic auth, set username = owner and
      password = token.
    </div>
  </div>
</div>

<div class="card p-6 mb-6">
  <div class="flex justify-between items-center mb-4">
    <h3>Owners</h3>
    <span class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-sm rounded-full" id="owners-count"
      >0 owners</span
    >
  </div>
  <div id="users" class="text-gray-500 dark:text-gray-400">(none)</div>
</div>

<div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
  <h3 class="text-lg font-semibold mb-3">Usage examples</h3>
  <ul class="space-y-2 text-gray-600 dark:text-gray-400">
    <li>Git Basic auth: use <code>username = owner</code>, <code>password = token</code>.</li>
  </ul>
</div>
<script>
  const el = (id) => document.getElementById(id);
  function showMessage(text, isError = false) {
    const msg = el('message');
    msg.textContent = text;
    msg.className = isError
      ? 'block mb-4 p-4 rounded-lg bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-200'
      : 'block mb-4 p-4 rounded-lg bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-200';
    setTimeout(() => {
      msg.className = 'hidden mb-4 p-4 rounded-lg';
    }, 4000);
  }

  async function api(path, opts = {}) {
    const adm = el('adm').value.trim();
    const headers = Object.assign({ Authorization: 'Bearer ' + adm }, opts.headers || {});
    const res = await fetch('/auth/api' + path, Object.assign({}, opts, { headers }));
    if (!res.ok) {
      showMessage(
        'Error ' + res.status + ': ' + (await res.text().catch(() => 'Request failed')),
        true
      );
      return null;
    }
    return await res.json();
  }
  async function load() {
    const data = await api('/users');
    if (!data) return;
    const div = el('users');
    const count = (data.users && data.users.length) || 0;
    el('owners-count').textContent = count + (count === 1 ? ' owner' : ' owners');
    if (!data.users || !data.users.length) {
      div.className = 'empty';
      div.innerHTML = '(none)';
      showMessage('No owners found');
      return;
    }
    div.className = 'space-y-4';
    div.innerHTML = data.users
      .map(function (u) {
        const tokensHtml = (u.tokens || [])
          .map(function (h) {
            return (
              '<span class="inline-flex items-center gap-1 px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-sm mr-2">' +
              '<code class="text-sm">' +
              String(h).slice(0, 8) +
              '…</code>' +
              '<button class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 font-bold del-token" title="Delete token" data-owner="' +
              u.owner +
              '" data-hash="' +
              h +
              '">×</button></span>'
            );
          })
          .join('');
        return (
          '<div class="flex justify-between items-start p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">\
      <div>\
        <div class="font-semibold text-lg">' +
          u.owner +
          '</div>\
        <div class="text-sm text-gray-500 dark:text-gray-400 mb-2">tokens: ' +
          (u.tokens ? u.tokens.length : 0) +
          '</div>\
        <div class="flex flex-wrap gap-2">' +
          (tokensHtml || '<span class="text-gray-500 dark:text-gray-400">(no tokens)</span>') +
          '</div>\
      </div>\
      <div>\
        <button class="btn secondary del-owner" data-owner="' +
          u.owner +
          '">Delete Owner</button>\
      </div>\
    </div>'
        );
      })
      .join('');
    Array.from(div.querySelectorAll('.del-owner')).forEach((btn) => {
      btn.onclick = async () => {
        const owner = btn.getAttribute('data-owner');
        if (!confirm('Delete ' + owner + '?')) return;
        const result = await api('/users', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ owner }),
        });
        if (result) {
          showMessage("Owner '" + owner + "' deleted successfully");
          await load();
        }
      };
    });
    Array.from(div.querySelectorAll('.del-token')).forEach((btn) => {
      btn.onclick = async () => {
        const owner = btn.getAttribute('data-owner');
        const tokenHash = btn.getAttribute('data-hash');
        if (!owner || !tokenHash) return;
        if (!confirm('Delete token ' + tokenHash.slice(0, 8) + '… for ' + owner + '?')) return;
        const result = await api('/users', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ owner, tokenHash }),
        });
        if (result) {
          showMessage("Token deleted successfully for '" + owner + "'");
          await load();
        }
      };
    });
  }
  el('load').onclick = load;
  el('add').onclick = async () => {
    const owner = el('owner').value.trim();
    const token = el('token').value.trim();
    if (!owner || !token) {
      showMessage('Owner and token required', true);
      return;
    }
    const result = await api('/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ owner, token }),
    });
    if (result) {
      showMessage("Owner '" + owner + "' and token added successfully");
      el('token').value = '';
      await load();
    }
  };
  try {
    const saved = localStorage.getItem('adminToken');
    if (saved) el('adm').value = saved;
    el('adm').addEventListener('input', () => localStorage.setItem('adminToken', el('adm').value));
  } catch {}
</script>
{% endblock %}
