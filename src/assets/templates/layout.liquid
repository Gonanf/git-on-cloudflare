<!doctype html>
<html class="h-full">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ title | default: 'git-on-cloudflare' }}</title>
    <link rel="stylesheet" href="/dist/app.css">
    {% if needsMarkdown %}
      <!-- Markdown renderer + sanitizer (conditionally loaded) -->
      <script defer src="https://cdn.jsdelivr.net/npm/marked@latest/marked.min.js"></script>
      <script defer src="https://cdn.jsdelivr.net/npm/dompurify@latest/dist/purify.min.js"></script>
    {% endif %}
    {% if needsHighlight %}
      <!-- Syntax highlighting theme (conditionally loaded, pinned version) -->
      <link
        id="hljs-theme"
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/github.min.css"
      >
      <!-- Highlight.js core (conditionally loaded, pinned version) -->
      <script
        defer
        src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"
      ></script>
      {% if highlightLangs and highlightLangs.size > 0 %}
        {% for lang in highlightLangs %}
          <script
            defer
            src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/languages/{{ lang }}.min.js"
          ></script>
        {% endfor %}
      {% endif %}
    {% endif %}
    <script>
      (function () {
        function setHljsTheme(theme) {
          try {
            var el = document.getElementById('hljs-theme');
            if (!el) return;
            var base = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/';
            var href =
              theme === 'dark'
                ? base + 'github-dark-dimmed.min.css'
                : base + 'stackoverflow-light.min.css';
            if (el.getAttribute('href') !== href) el.setAttribute('href', href);
          } catch {}
        }
        try {
          var t = localStorage.getItem('theme') || 'dark';
          // Use Tailwind's dark mode class
          document.documentElement.classList.remove('dark');
          if (t === 'dark') document.documentElement.classList.add('dark');
          setHljsTheme(t);
          updateThemeUI(t);
          window.__toggleTheme = function () {
            var hasDark = document.documentElement.classList.contains('dark');
            var next = hasDark ? 'light' : 'dark';
            document.documentElement.classList.remove('dark');
            if (next === 'dark') document.documentElement.classList.add('dark');
            setHljsTheme(next);
            updateThemeUI(next);
            try {
              localStorage.setItem('theme', next);
            } catch {}
          };
          function updateThemeUI(theme) {
            try {
              var btn = document.getElementById('theme-toggle');
              var l = btn.querySelector('.icon-light');
              var d = btn.querySelector('.icon-dark');
              l.classList.add('hidden');
              d.classList.add('hidden');
              if (theme === 'dark') {
                d.classList.remove('hidden');
                btn.setAttribute('aria-label', 'Toggle theme (current: Dark)');
              } else {
                l.classList.remove('hidden');
                btn.setAttribute('aria-label', 'Toggle theme (current: Light)');
              }
            } catch {}
          }
        } catch {}
      })();
    </script>
    {% if needsMarkdown or needsHighlight %}
      <script>
        // Render any markdown blocks present on the page and rewrite relative links/images
        // based on the container's data attributes: data-md-owner, data-md-repo, data-md-ref, data-md-base
        (function () {
          function isAbsoluteUrl(href) {
            return /^(?:[a-z]+:)?\/\//i.test(href) || href.startsWith('/') || href.startsWith('#');
          }
          function joinPath(base, rel) {
            if (!base) base = '';
            if (!rel) return base;
            // Strip query/fragment for path resolution, preserve to append later
            var frag = '';
            var q = rel.indexOf('#');
            if (q !== -1) {
              frag = rel.slice(q);
              rel = rel.slice(0, q);
            }
            var baseParts = base.split('/').filter(Boolean);
            var relParts = rel.split('/').filter(function (p) {
              return p.length > 0;
            });
            relParts.forEach(function (p) {
              if (p === '.') return;
              if (p === '..') baseParts.pop();
              else baseParts.push(p);
            });
            var out = baseParts.join('/');
            return out + frag;
          }
          function rewriteRelativeLinks(container) {
            try {
              var owner = container.getAttribute('data-md-owner') || '';
              var repo = container.getAttribute('data-md-repo') || '';
              var ref = container.getAttribute('data-md-ref') || '';
              var base = container.getAttribute('data-md-base') || '';
              if (!owner || !repo || !ref) return; // nothing to do
              // Normalize base to a directory path (no trailing slash)
              if (base.endsWith('/')) base = base.slice(0, -1);

              // Rewrite anchors
              container.querySelectorAll('a[href]').forEach(function (a) {
                var href = a.getAttribute('href') || '';
                if (!href || isAbsoluteUrl(href)) return;
                // Preserve fragment if present
                var frag = '';
                var i = href.indexOf('#');
                if (i !== -1) {
                  frag = href.slice(i);
                  href = href.slice(0, i);
                }
                var resolved = joinPath(base, href);
                var url =
                  '/' +
                  encodeURIComponent(owner) +
                  '/' +
                  encodeURIComponent(repo) +
                  '/blob?ref=' +
                  encodeURIComponent(ref) +
                  '&path=' +
                  encodeURIComponent(resolved) +
                  frag;
                a.setAttribute('href', url);
              });

              // Rewrite images to raw-by-path endpoint so they render inline
              container.querySelectorAll('img[src]').forEach(function (img) {
                var src = img.getAttribute('src') || '';
                if (!src || isAbsoluteUrl(src)) return;
                var resolved = joinPath(base, src);
                var name = resolved.split('/').pop() || 'file';
                var url =
                  '/' +
                  encodeURIComponent(owner) +
                  '/' +
                  encodeURIComponent(repo) +
                  '/rawpath?ref=' +
                  encodeURIComponent(ref) +
                  '&path=' +
                  encodeURIComponent(resolved) +
                  '&name=' +
                  encodeURIComponent(name);
                img.setAttribute('src', url);
              });
            } catch {}
          }
          function renderMarkdownBlocks() {
            try {
              var nodes = document.querySelectorAll('[data-markdown="1"]');
              nodes.forEach(function (node) {
                var pre = node.querySelector('pre.md-src');
                if (!pre) return;
                var raw = pre.textContent || '';
                var html = marked.parse(raw);
                var clean = DOMPurify.sanitize(html, { USE_PROFILES: { html: true } });
                node.innerHTML = clean;
                rewriteRelativeLinks(node);
              });
            } catch {}
          }
          function run() {
            renderMarkdownBlocks();
            try {
              hljs.highlightAll();
            } catch {}
          }
          // Wait until all resources (including CSS) are loaded to avoid FOUC/layout thrash
          if (document.readyState === 'complete') run();
          else window.addEventListener('load', run);
        })();
      </script>
    {% endif %}
  </head>
  <body class="min-h-full text-gray-900 dark:text-gray-100">
    <div class="container py-4">
      <header class="flex justify-between items-center mb-6 pb-4 border-b border-gray-300 dark:border-gray-700">
        <nav class="flex items-center gap-4">
          <a
            href="/"
            class="font-bold text-lg hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            >git-on-cloudflare</a
          >
          <a
            href="/auth"
            class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
            >Auth</a
          >
        </nav>
        <div>
          <button
            id="theme-toggle"
            class="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-100 px-2 py-1 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors cursor-pointer"
            onclick="__toggleTheme()"
            aria-label="Toggle theme"
          >
            <!-- Light icon -->
            <i class="bi bi-sun icon-light w-5 h-5" aria-hidden="true"></i>
            <!-- Dark icon -->
            <i class="bi bi-moon-stars icon-dark w-5 h-5 hidden" aria-hidden="true"></i>
          </button>
        </div>
      </header>
      <main class="min-h-[calc(100vh-200px)]">
        {% block -%}
        {%- endblock %}
      </main>
      <footer class="mt-12 pt-8 pb-4 border-t border-gray-300 dark:border-gray-700">
        <div class="text-center text-sm text-gray-600 dark:text-gray-400">
          <p class="mb-2">
            <i
              class="bi bi-heart-fill inline w-4 h-4 mr-1 text-red-500 align-[-2px]"
              aria-hidden="true"
            ></i>
            Made with Cloudflare
          </p>
          <div class="flex justify-center gap-6">
            <a
              href="https://github.com/zllovesuki/git-on-cloudflare"
              class="hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
            >
              GitHub
            </a>
            <a
              href="https://git-on-cloudflare.com/rachel/git-on-cloudflare"
              class="hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
            >
              git-on-cloudflare
            </a>
          </div>
        </div>
      </footer>
    </div>
  </body>
</html>
