{% layout 'layout' %}
{% block %}
{% render 'repo_nav', owner: owner, repo: repo, refEnc: refEnc, currentTab: 'commits' %}
{% render 'progress', progress: progress %}
<h2>
  Commits on
  {% assign refLen = ref | size %}
  {% if refLen == 40 %}
    <span class="sm:hidden font-mono">{{ ref | slice: 0, 12 }}…</span>
    <span class="hidden sm:inline font-mono">{{ ref }}</span>
  {% else %}
    <span class="font-mono">{{ ref }}</span>
  {% endif %}
</h2>
{% if pager %}
  <div class="pager">
    <div class="perpage">
      Per page:
      {% for link in pager.perPageLinks %}
        <a href="{{ link.href }}">{{ link.text }}</a>
      {% endfor %}
    </div>
    <div class="nav">
      {% if pager.newerHref %}
        <a class="btn sm secondary" href="{{ pager.newerHref }}">← Newer</a>
      {% endif %}
      {% if pager.olderHref %}
        <a class="btn sm" href="{{ pager.olderHref }}">Older →</a>
      {% endif %}
    </div>
  </div>
{% endif %}
<table
  id="commits-table"
  data-owner="{{ owner }}"
  data-repo="{{ repo }}"
  class="mt-4 rounded-lg overflow-hidden shadow-xs border border-gray-200 dark:border-gray-700"
>
  <thead>
    <tr>
      <th>OID</th>
      <th>Message</th>
      <th>Author</th>
      <th>Date</th>
    </tr>
  </thead>
  <tbody>
    {% if commits and commits.size > 0 %}
      {% for commit in commits %}
        {% assign mergeRowClass = '' %}
        {% if commit.isMerge %}
          {% assign mergeRowClass = 'border-l-4 border-blue-400 dark:border-blue-600 bg-blue-50/30 dark:bg-blue-900/10 cursor-pointer hover:bg-blue-50/50 dark:hover:bg-blue-900/20' %}
        {% endif %}
        {% if commit.isMerge %}
          {% render 'commit_row',
            owner: owner,
            repo: repo,
            commit: commit,
            isMerge: true,
            rowClass: mergeRowClass,
            toggleOid: commit.oid
          %}
        {% else %}
          {% render 'commit_row',
            owner: owner,
            repo: repo,
            commit: commit,
            isMerge: false,
            rowClass: mergeRowClass
          %}
        {% endif %}
        {% if commit.isMerge %}
          <tr class="merge-tools hidden" data-merge-oid="{{ commit.oid }}">
            <td colspan="1000">
              <span class="muted">Merge commit</span>
              <a
                href="#"
                class="btn sm secondary"
                data-merge-oid="{{ commit.oid }}"
                aria-expanded="false"
                >Show commits from this merge</a
              >
            </td>
          </tr>
        {% endif %}
      {% endfor %}
    {% else %}
      <tr>
        <td colspan="4" class="muted">(none)</td>
      </tr>
    {% endif %}
  </tbody>
</table>
<script>
  (function () {
    function onClickMerge(e) {
      var a = e.target.closest('a[data-merge-oid]');
      var row = e.target.closest('tr[data-merge-oid]');
      if (!a && !row) return;
      // If clicking inside the merge row but on a regular link (e.g., OID), let navigation happen
      if (!a && row) {
        var insideLink = e.target.closest('a[href]');
        if (insideLink) return;
      }
      // Prevent default only for our expansion controls
      e.preventDefault();
      var oid = a ? a.getAttribute('data-merge-oid') : row.getAttribute('data-merge-oid');
      var rowTools = document.querySelector('tr.merge-tools[data-merge-oid="' + oid + '"]');
      var table = document.getElementById('commits-table');
      if (!oid || !rowTools || !table) return;
      // Helpers: change Merge badge color on expand/collapse
      function setBadge(expanded) {
        var tr = document.querySelector('tr[data-merge-oid="' + oid + '"]');
        if (!tr) return;
        var badge = tr.querySelector('.merge-badge');
        if (!badge) return;
        var toRemove = [
          // collapsed (sky)
          'bg-sky-100',
          'text-sky-900',
          'dark:bg-sky-500/20',
          'dark:text-sky-300',
          'dark:border',
          'dark:border-sky-500/40',
          // expanded (amber)
          'bg-amber-200',
          'text-amber-900',
          'dark:bg-amber-900/40',
          'dark:text-amber-200',
          'dark:border-amber-500/40',
        ];
        toRemove.forEach(function (c) {
          badge.classList.remove(c);
        });
        if (expanded) {
          badge.classList.add(
            'bg-amber-200',
            'text-amber-900',
            'dark:bg-amber-900/40',
            'dark:text-amber-200',
            'dark:border',
            'dark:border-amber-500/40'
          );
        } else {
          badge.classList.add(
            'bg-sky-100',
            'text-sky-900',
            'dark:bg-sky-500/20',
            'dark:text-sky-300',
            'dark:border',
            'dark:border-sky-500/40'
          );
        }
      }
      var rows = table.querySelectorAll('tr[data-merge-of="' + oid + '"]');
      var anyVisible = false;
      rows.forEach(function (r) {
        if (!r.classList.contains('hidden')) anyVisible = true;
      });
      var expanded = anyVisible;

      // Collapse: remove all rows belonging to this merge
      if (expanded) {
        rows.forEach(function (r) {
          r.classList.add('hidden');
        });
        var ph = table.querySelector('#merge-' + oid + '-frag');
        if (ph) ph.parentNode && ph.parentNode.removeChild(ph);
        if (a) {
          a.setAttribute('aria-expanded', 'false');
          a.textContent = 'Show commits from this merge';
        }
        setBadge(false);
        return;
      }

      // If we already have rows (hidden from previous load), simply show them
      // unless they are only an empty placeholder, in which case re-fetch
      if (rows.length > 0) {
        var hasNonEmpty = false;
        rows.forEach(function (r) {
          if (!r.classList.contains('merge-empty')) hasNonEmpty = true;
        });
        if (hasNonEmpty) {
          rows.forEach(function (r) {
            r.classList.remove('hidden');
          });
          if (a) a.setAttribute('aria-expanded', 'true');
          setBadge(true);
          return;
        } else {
          // we have only merge-empty rows; proceed to fetch fresh content
          rows.forEach(function (r) {
            r.classList.add('hidden');
          });
        }
      }

      // Insert placeholder right after the tools row
      var placeholderId = 'merge-' + oid + '-frag';
      var placeholder = document.createElement('tr');
      placeholder.id = placeholderId;
      var td = document.createElement('td');
      try {
        var ths = table ? table.querySelectorAll('thead th') : null;
        var visibleCols = 0;
        if (ths && ths.length) {
          for (var i = 0; i < ths.length; i++) {
            var s = getComputedStyle(ths[i]);
            if (s && s.display !== 'none') visibleCols++;
          }
        }
        td.colSpan = visibleCols || 1000; // span all visible columns; fallback large number
      } catch {
        td.colSpan = 1000;
      }
      td.className = 'muted';
      td.textContent = 'Loading…';
      placeholder.appendChild(td);
      rowTools.parentNode.insertBefore(placeholder, rowTools.nextSibling);
      if (a) {
        a.setAttribute('aria-expanded', 'true');
        a.textContent = 'Loading…';
      }

      // Prevent double-fetch
      if (rowTools.getAttribute('data-loading') === '1') return;
      rowTools.setAttribute('data-loading', '1');

      // Build fragment URL
      var owner = table.getAttribute('data-owner');
      var repo = table.getAttribute('data-repo');
      var url =
        '/' +
        encodeURIComponent(owner) +
        '/' +
        encodeURIComponent(repo) +
        '/commits/fragments/' +
        oid +
        '?limit=20';

      fetch(url, { headers: { 'X-Requested-With': 'fetch' } })
        .then(function (res) {
          if (!res.ok) throw new Error('HTTP ' + res.status);
          return res.text();
        })
        .then(function (html) {
          var ph = document.getElementById(placeholderId);
          if (!ph) return;
          // Remove any stale empty rows from a previous fast click
          var empties = table.querySelectorAll('tr.merge-empty[data-merge-of="' + oid + '"]');
          empties.forEach(function (r) {
            r.parentNode && r.parentNode.removeChild(r);
          });
          // Tag returned rows with data-merge-of for collapse
          // Server already includes data-merge-of via mergeOf param; just replace placeholder
          ph.outerHTML = html;
          if (a) a.textContent = 'Hide commits from this merge';
          setBadge(true);
        })
        .catch(function () {
          var ph = document.getElementById(placeholderId);
          if (ph) {
            ph.querySelector('td').textContent = 'Failed to load merge commits. Click to retry.';
          }
          if (a) {
            a.setAttribute('aria-expanded', 'false');
            a.textContent = 'Show commits from this merge';
          }
        })
        .finally(function () {
          rowTools.removeAttribute('data-loading');
        });
    }
    document.addEventListener('click', onClickMerge);
  })();
</script>
{% endblock %}
